import random

from telethon import Button

from Jessica import CMD_HELP
from Jessica.events import Cbot, Cinline

plugins = [
    "Admin",
    "AFK",
    "Approval",
    "AI-Chatbot",
    "Filters",
    "Greetings",
    "Locks",
    "Stickers",
    "Rules",
    "Song",
    "Reports",
    "Quotly",
    "Purges",
    "Pin",
    "Misc",
    "Inline",
    "Forcesubscribe",
    "Federations",
    "Extras",
    "Bans",
    "Blocklist",
    "Antiflood",
    "CAPTCHA",
    "Warnings",
]

dps = [
    "https://telegra.ph/file/c6e1b8dffef90de602f52.jpg",
    "https://telegra.ph/file/75bf845ca6c731e7f0dc3.jpg",
]
help_caption = """
Hey! My name is NekoChan. I am a group management bot, here to help you get around and keep the order in your groups!
I have lots of handy features, such as flood control, a warning system, a note keeping system, and even predetermined replies on certain keywords.

**Helpful commands:**
- `/start`: Starts me! You've probably already used this.
- `/help`: Sends this message; I'll tell you more about myself!

If you have any bugs or questions on how to use me, have a look at @NekoChan_Updates.
 All commands can be used with the following: `/!?`
"""
advanced_caption = """
üëãüèªH·¥á è **[{}](tg://user?id={})**!, I A·¥ç N·¥á·¥ã·¥èC ú·¥Ä…¥, H·¥á Ä·¥á T·¥è H·¥á ü·¥ò Y·¥è·¥ú T·¥è M·¥Ä…¥·¥Ä…¢·¥á Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥òs! I P·¥á Ä“ì·¥è Ä·¥ç M·¥ès·¥õ O“ì T ú·¥á A·¥Ö·¥ç…™…¥ F·¥ú…¥·¥Ñ·¥õ…™·¥è…¥s A…¥·¥Ö M·¥Ä·¥ã·¥á Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò A·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ·¥á·¥Ö 

@NekoChan_Updates F·¥è Ä U·¥ò·¥Ö·¥Ä·¥õ·¥ás
@NekoChan_Support F·¥è Ä S·¥ú·¥ò·¥ò·¥è Ä·¥õ 

Y·¥è·¥ú C·¥Ä…¥ C ú·¥á·¥Ñ·¥ãO·¥ú·¥õ M·¥è Ä·¥á A ô·¥è·¥ú·¥õ M·¥á V…™·¥Ä F·¥è ü ü·¥è·¥°…™…¥…¢ B·¥ú·¥õ·¥õ·¥è…¥s.
"""
about = """
**A ô·¥è·¥ú·¥õ M·¥á**

M è N·¥Ä·¥ç·¥á Is N·¥á·¥ã·¥è C ú·¥Ä…¥ , A G Ä·¥è·¥ú·¥ò M·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ B·¥è·¥õ W ú·¥è C·¥Ä…¥ T·¥Ä·¥ã·¥á C·¥Ä Ä·¥á O“ì Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥òs W…™·¥õ ú A·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ·¥á·¥Ö R·¥á…¢·¥ú ü·¥Ä Ä A·¥Ö·¥ç…™…¥ A·¥Ñ·¥õ…™·¥è…¥s! 

**M è S·¥è“ì·¥õ·¥°·¥Ä Ä·¥á V·¥á Äs…™·¥è…¥:** 1.0.5

**M è D·¥á·¥†·¥á ü·¥è·¥ò·¥á Äs:**
‚Ä¢ `@RoseLoverX`
‚Ä¢ `@Itz_RexModz`

**U·¥ò·¥Ö·¥Ä·¥õ·¥ás C ú·¥Ä…¥…¥·¥á ü:** [C ü…™·¥Ñ·¥ã H·¥á Ä·¥á](t.me/nekochan_updates)
**S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò:** [C ü…™·¥Ñ·¥ã H·¥á Ä·¥á](t.me/nekochan_support)

__A…¥·¥Ö F…™…¥·¥Ä ü ü è S·¥ò·¥á·¥Ñ…™·¥Ä ü T ú·¥Ä…¥·¥ãs O“ì G Ä·¥Ä·¥õ…™·¥õ·¥ú·¥Ö·¥á T·¥è A ü ü M è Us·¥á Äs W ú·¥è R·¥á ü…™·¥á·¥Ö O…¥ M·¥á F·¥è Ä M·¥Ä…¥·¥Ä…¢…™…¥…¢ T ú·¥á…™ Ä G Ä·¥è·¥ú·¥òs , I H·¥è·¥ò·¥á Y·¥è·¥ú W…™ ü ü A ü·¥°·¥Ä ès L…™·¥ã·¥á M·¥á ; M è D·¥á·¥†·¥á ü·¥è·¥ò·¥á Äs A Ä·¥á C·¥è…¥s·¥õ·¥Ä…¥·¥õ ü è W·¥è Ä·¥ã…™…¥…¢ T·¥è I·¥ç·¥ò Ä·¥è·¥†·¥á M·¥á!__
"""
tc = """
**T·¥á Ä·¥çs A…¥·¥Ö C·¥è…¥·¥Ö…™·¥õ…™·¥è…¥s:**

- O…¥ ü è Y·¥è·¥ú Ä Us·¥á Ä_I·¥Ö Is S·¥õ·¥è Ä·¥á·¥Ö F·¥è Ä A C·¥è…¥·¥†·¥á…¥…™·¥á…¥·¥õ C·¥è·¥ç·¥ç·¥ú…¥…™·¥Ñ·¥Ä·¥õ…™·¥è…¥!
- N·¥è G Ä·¥è·¥ú·¥ò I·¥Ö O Ä I·¥õs M·¥áss·¥Ä…¢·¥ás A Ä·¥á S·¥õ·¥è Ä·¥á·¥Ö , W·¥á R·¥ás·¥ò·¥á·¥Ñ·¥õ E·¥†·¥á Ä è·¥è…¥·¥á's P Ä…™·¥†·¥Ä·¥Ñ è.
- M·¥áss·¥Ä…¢·¥ás B·¥á·¥õ·¥°·¥á·¥á…¥ B·¥è·¥õ A…¥·¥Ö Y·¥è·¥ú Is O…¥ ü è I…¥F Ä·¥è…¥·¥õ O“ì Y·¥è·¥ú Ä E è·¥ás A…¥·¥Ö T ú·¥á Ä·¥á Is N·¥è B·¥Ä·¥Ñ·¥ãUs·¥á O“ì I·¥õ.
- W·¥Ä·¥õ·¥Ñ ú Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò , I“ì S·¥è·¥ç·¥á·¥è…¥·¥á Is S·¥ò·¥Ä·¥ç·¥ç…™…¥…¢ Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò , Y·¥è·¥ú C·¥Ä…¥ Us·¥á T ú·¥á R·¥á·¥ò·¥è Ä·¥õ F·¥á·¥Ä·¥õ·¥ú Ä·¥á O“ì Y·¥è·¥ú Ä T·¥á ü·¥á…¢ Ä·¥Ä·¥ç C ü…™·¥á…¥·¥õ.
- D·¥è N·¥è·¥õ S·¥ò·¥Ä·¥ç C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös , B·¥ú·¥õ·¥õ·¥è…¥s , O Ä A…¥ è·¥õ ú…™…¥…¢ I…¥ B·¥è·¥õ P·¥ç

ùôâùôäùôèùôÄ: T·¥á Ä·¥çs A…¥·¥Ö C·¥è…¥·¥Ö…™·¥õ…™·¥è…¥s M…™…¢ ú·¥õ C ú·¥Ä…¥…¢·¥á A…¥ è·¥õ…™·¥ç·¥á.

**U·¥ò·¥Ö·¥Ä·¥õ·¥ás C ú·¥Ä…¥…¥·¥á ü:** [C ü…™·¥Ñ·¥ã H·¥á Ä·¥á](t.me/nekochan_updates)
**S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò:** [C ü…™·¥Ñ·¥ã H·¥á Ä·¥á](t.me/nekochan_support)
"""


@Cbot(pattern="^/start$")
async def start(event):
    if event.is_group or event.is_channel:
        await event.reply("Hi there, I'm online ^_^")
    elif event.is_private:
        buttons = [
            [
                Button.inline("A·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö", data="soon"),
                Button.inline("C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", data="help_menu"),
            ],
            [
                Button.url(
                    "A·¥Ö·¥Ö M·¥á T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò!", "t.me/missneko_bot?startgroup=true"
                ),
            ],
        ]
        await event.respond(
            advanced_caption.format(event.sender.first_name, event.sender_id),
            buttons=buttons,
            file=random.choice(dps),
        )


@Cbot(pattern="^/help ?(.*)")
async def help(event):
    if event.is_group:
        buttons = [
            [
                Button.url("S·¥ú·¥ò·¥ò·¥è Ä·¥õ", "t.me/nekochan_support"),
                Button.url("U·¥ò·¥Ö·¥Ä·¥õ·¥ás", "t.me/nekochan_support"),
            ],
            [Button.url("H·¥á ü·¥ò", "https://t.me/MissNeko_Bot?start=_help")],
        ]
        await event.reply(
            "C ü…™·¥Ñ·¥ã B·¥á ü·¥è·¥° B·¥ú·¥õ·¥õ·¥è…¥ T·¥è G·¥á·¥õ H·¥á ü·¥ò I…¥ P·¥ç.",
            buttons=buttons,
        )
    elif event.is_private:
        buttons = paginate_help(event)
        await event.reply(help_caption, buttons=buttons)


@Cbot(pattern="^/start _help")
async def st_help(e):
    buttons = paginate_help(e)
    await e.respond(help_caption, buttons=buttons)


@Cinline(pattern=r"help_menu")
async def help_menu(event):
    buttons = paginate_help(event)
    await event.edit(help_caption, buttons=buttons)


@Cinline(pattern=r"us_plugin_(.*)")
async def us_0(event):
    pl_name = (event.pattern_match.group(1)).decode()
    try:
        pl_help = CMD_HELP[pl_name][1]
    except KeyError:
        pl_help = "The help menu for this module will be provided soon!"
    await event.edit(
        pl_help,
        buttons=[
            Button.inline("Home", data="soon"),
            Button.inline("Back", data="help_menu"),
        ],
    )


def paginate_help(event):
    helpable_plugins = sorted(plugins)
    modules = [
        Button.inline(x, data=f"us_plugin_{x.lower()}") for x in helpable_plugins
    ]
    pairs = list(
        zip(
            modules[::3],
            modules[1::3],
            modules[2::3],
        )
    )
    modulo_page = 0 % 1
    pairs = pairs[modulo_page * 8 : 8 * (modulo_page + 1)] + [
        (Button.inline("Back", data="soon"),)
    ]
    return pairs


@Cinline(pattern="soon")
async def soon(event):
    buttons = [
        [Button.url("Configuration Tutorial", "https://t.me/NekoChan_Updates/13")],
        [
            Button.inline("About Me", data="me_detail"),
            Button.inline("Commands", data="help_menu"),
        ],
        [Button.inline("Terms and Conditions", data="t&c")],
    ]
    await event.edit(
        advanced_caption.format(event.sender.first_name, event.sender_id),
        buttons=buttons,
    )


@Cinline(pattern="me_detail")
async def me(e):
    buttons = Button.inline("Back", data="soon")
    await e.edit(about, buttons=buttons, link_preview=False)


@Cinline(pattern="t&c")
async def t_c(e):
    buttons = Button.inline("Back", data="soon")
    await e.edit(tc, buttons=buttons, link_preview=False)
